#ifndef CONSTANTS_HPP
#define CONSTANTS_HPP

#include <raylib.h>

// -----------------------------
// V V V FEEL FREE TO CHANGE V V V

// THE AMOUNT OF PIXELS THE LONGER SIDE OF THE GRID CAN MAX OUT TO

// RECOMMEND:   MAKE THIS VALUE A MULTIPLE OF THE LONGER SIDE LENGTH PIXELS COUNT.
//              MAKE IT THE ABOUT THE ~SECOND BIGGEST MULTIPLE UNDER YOU MONITORS
//              HEIGHT OR LENGTH IN PIXELS (FOR IF ROW IS BIGGER OR IF COLUMN IS BIGGER)  

constexpr int GRID_LONGER_SIDE = 864;

// Y: MUST BE UNDER OR EQUAL TO GRID_LONGER_SIDE
constexpr int GRID_SIZE_ROWS = 32;

// X: MUST BE UNDER OR EQUAL TO GRID_LONGER_SIDE
constexpr int GRID_SIZE_COLUMNS = 32;

// BUTTON HEIGHT
constexpr int BUTTON_HEIGHT = 60;

// -----------------------------

// -----------------------------
// V V V DONT CHANGE THESE V V V

// THE AMOUNT OF PIXELS THE GRID IS OFFSET FROM THE TOP LEFT CORNER BY
constexpr int GRID_OFFSET = 16;

// WORKING PIXEL SIZE
constexpr double PIXEL_SIZE = (GRID_SIZE_COLUMNS > GRID_SIZE_ROWS) ? (GRID_LONGER_SIDE/GRID_SIZE_COLUMNS) : (GRID_LONGER_SIDE/GRID_SIZE_ROWS);

// ACTUAL GRID WIDTH. PRECISION ISSUES MAKE THIS NEEDED
constexpr double ACTUAL_WIDTH = GRID_SIZE_COLUMNS * PIXEL_SIZE;

// ACTUAL GRID HEIGHT. PRECISION ISSUES MAKE THIS NEEDED
constexpr double ACTUAL_HEIGHT = GRID_SIZE_ROWS * PIXEL_SIZE;

// BUTTON LENGTH
constexpr int BUTTON_LENGTH = BUTTON_HEIGHT * 3;

// FONT SPACING
constexpr int FONT_SPACING = 2;

// FONT SIZE
constexpr int FONT_SIZE = BUTTON_HEIGHT / 2;

// BORDER WIDTH FOR UI ELEMENTS
constexpr int BORDER_WIDTH = 4;

// GAP BETWEEN ELEMENTS
constexpr int ELEMENT_GAP = BORDER_WIDTH * 3;

// MIN WINDOW HEIGHT
constexpr int MIN_WINDOW_HEIGHT = GRID_OFFSET + (BUTTON_LENGTH) + (BUTTON_HEIGHT * 6) + (ELEMENT_GAP * 6) + GRID_OFFSET;

// -----------------------------
// V V V    COLUMN ONE    V V V

// WHERE PALETTE IS DRAWN FROM
constexpr Vector2 PL_ORIGIN = {(GRID_OFFSET + BORDER_WIDTH + ACTUAL_WIDTH + ELEMENT_GAP), GRID_OFFSET};

// WHERE GET COLOR IS DRAWN FROM
constexpr Vector2 GC_ORIGIN = {(PL_ORIGIN.x), (PL_ORIGIN.y + ELEMENT_GAP + BUTTON_LENGTH)};

// WHERE RED BUTTON IS DRAWN FROM
constexpr Vector2 RB_ORIGIN = {(PL_ORIGIN.x), (GC_ORIGIN.y + ELEMENT_GAP + BUTTON_HEIGHT)};

// WHERE GREEN BUTTON IS DRAWN FROM
constexpr Vector2 GB_ORIGIN = {(PL_ORIGIN.x), (RB_ORIGIN.y + ELEMENT_GAP + BUTTON_HEIGHT)};

// WHERE GREEN BUTTON IS DRAWN FROM
constexpr Vector2 BB_ORIGIN = {(PL_ORIGIN.x), (GB_ORIGIN.y + ELEMENT_GAP + BUTTON_HEIGHT)};

// WHERE BRUSH SIZE BUTTON IS DRAWN FROM
constexpr Vector2 BS_ORIGIN = {(PL_ORIGIN.x), (BB_ORIGIN.y + ELEMENT_GAP + BUTTON_HEIGHT)};

// WHERE RECT BUTTON IS DRAWN FROM
constexpr Vector2 RT_ORIGIN = {(PL_ORIGIN.x), (BS_ORIGIN.y + ELEMENT_GAP + BUTTON_HEIGHT)};

// -----------------------------
// V V V    COLUMN TWO     V V V

// WHERE CURRENT COLOR IS DRAWN FROM
constexpr Vector2 CC_ORIGIN = {(PL_ORIGIN.x + BUTTON_LENGTH + ELEMENT_GAP), (PL_ORIGIN.y)};

// WHERE EXPORT BUTTON IS DRAWN FROM
constexpr Vector2 EX_ORIGIN = {(CC_ORIGIN.x), (CC_ORIGIN.y + ELEMENT_GAP + BUTTON_LENGTH)};

// WHERE CLEAR BUTTON IS DRAWN FROM
constexpr Vector2 CL_ORIGIN = {(CC_ORIGIN.x), (RT_ORIGIN.y)};

// ----------------------------------------------
// V V V FINAL CALCULATED WINDOW DIMENSIONS V V V

// WINDOW X RESOLUTION
constexpr int WINDOW_WIDTH = (GRID_OFFSET + BORDER_WIDTH + ACTUAL_WIDTH + ELEMENT_GAP + BUTTON_LENGTH + ELEMENT_GAP + BUTTON_LENGTH + GRID_OFFSET);

// WINDOW Y RESOLUTION
constexpr int WINDOW_HEIGHT = (MIN_WINDOW_HEIGHT >= GRID_OFFSET + ACTUAL_HEIGHT + GRID_OFFSET) ? (MIN_WINDOW_HEIGHT) : (GRID_OFFSET + ACTUAL_HEIGHT + GRID_OFFSET);

// -----------------------------


#endif